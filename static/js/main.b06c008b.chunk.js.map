{"version":3,"sources":["features/songSlice/songSlice.js","components/ListItem/Item/Item.js","components/ListItem/ListItemComponent.js","components/Search/SearchComponent.js","env.js","components/Player/PlayerComponent.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["songSlice","createSlice","name","initialState","currentSong","searchList","list","visibility","playList","reducers","playsong","state","action","id","payload","addSearchList","data","console","log","length","song","visibilitySearchList","songReducer","reducer","songSelector","actions","useStyles","makeStyles","root","display","height","width","detail","textAlign","padding","Item","artist","thumb","classes","dispath","useDispatch","Grid","item","xs","sm","lg","xl","Paper","className","square","elevation","alt","src","Typography","style","textTransform","fontSize","whiteSpace","overflow","textOverflow","variant","component","Box","spacing","justifyContent","IconButton","aria-label","onClick","playSong","color","paddingTop","paddingBottom","ListItemComponent","useState","currentPage","setCurrentPage","pageCount","Math","ceil","start","end","listPagination","slice","container","map","i","Pagination","page","onChange","e","count","borderRadius","SearchComponent","searchString","setSearchString","useSelector","marginBottom","onSubmit","preventDefault","songName","search_key","trim","a","axios","get","encodeURIComponent","response","status","TextField","value","target","label","PlayerComponent","onPlay","onEnded","showSkipControls","showJumpControls","App","AppBar","Toolbar","Menu","fontWeight","configureStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b06c008b.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\r\nimport axios from \"axios\";\r\nimport { proxy } from \"../../env\";\r\n\r\nconst songSlice = createSlice({\r\n    name: \"song\",\r\n    initialState: {\r\n        currentSong: {},\r\n        searchList: {\r\n            list:[],\r\n            visibility: false\r\n        },\r\n        playList: []\r\n    },\r\n    reducers: {\r\n        playsong: (state, action) => {\r\n            state.currentSong = { id: action.payload }\r\n        },\r\n        addSearchList: (state, action) => {\r\n            const { data } = action.payload;\r\n            console.log(data)\r\n            if (data.length === 0) {\r\n\r\n                state.searchList.list = []\r\n                return\r\n            }\r\n\r\n            state.searchList.list = data[0].song ? data[0].song : [];\r\n        },\r\n        visibilitySearchList: (state) =>{\r\n            state.searchList.visibility = true;\r\n        }\r\n    }\r\n})\r\n\r\n//action creator\r\nexport const getSongByName = (songName) => async (dispath) => {\r\n    try {\r\n        const response = await axios.get(`${proxy}${encodeURIComponent(`http://ac.mp3.zing.vn/complete?type=artist,song,key,code&num=20&query=${songName}`)}`);\r\n        if (response.status === 200) {\r\n            dispath(addSearchList(response.data));\r\n\r\n        }\r\n\r\n    }\r\n    catch (e) {\r\n        console.log(e);\r\n    }\r\n}\r\n//reducer\r\nconst songReducer = songSlice.reducer;\r\n\r\n\r\nexport const songSelector = state => state.song;\r\n\r\nexport const { playsong, addSearchList,visibilitySearchList } = songSlice.actions;\r\n\r\nexport default songReducer","import { Grid, Paper, Typography, Box, IconButton } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\r\nimport GetAppIcon from '@material-ui/icons/GetApp';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport React from \"react\";\r\nimport { playsong } from \"../../../features/songSlice/songSlice\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        display: 'flex',\r\n        height: 115,\r\n        width: `100%`\r\n\r\n    },\r\n    detail: {\r\n        textAlign: \"start\",\r\n        padding: 6,\r\n\r\n    }\r\n\r\n})\r\n\r\nconst Item = ({ name, artist, thumb, id }) => {\r\n    const classes = useStyles();\r\n\r\n    const dispath = useDispatch();\r\n    const playSong = (id) => {\r\n        console.log(id)\r\n        dispath(playsong(id));\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12} sm={6} lg={4} xl={3}>\r\n            <Paper className={classes.root} square elevation={3}  >\r\n                <Grid item xs={4}  >\r\n                    <img height='115' alt=\"img\" width='100%' src={'https://photo-resize-zmp3.zadn.vn/w94_r1x1_jpeg/' + thumb} />\r\n                </Grid>\r\n                <Grid className={classes.detail} item xs={8}>\r\n                    <Typography style={{\r\n                        textTransform: 'capitalize', fontSize: 22, display: 'inline-block', whiteSpace: `nowrap`,\r\n                        overflow: `hidden`,\r\n                        width: `100%`,\r\n                        textOverflow: `ellipsis`\r\n                    }} variant=\"h6\" component=\"h6\">{name}</Typography>\r\n                    <Typography style={{ fontSize: 14, textTransform: 'capitalize' }} variant=\"subtitle1\">{artist}</Typography>\r\n                    <Box display=\"flex\" spacing={2} justifyContent='center'>\r\n                        <IconButton aria-label=\"Play\" onClick={() => playSong(id)} ><PlayCircleFilledIcon color=\"secondary\" /></IconButton>\r\n                        <IconButton aria-label=\"Add to playlist\"><AddCircleIcon color=\"secondary\" /></IconButton>\r\n                        <IconButton aria-label=\"Download\"><GetAppIcon color=\"secondary\" /></IconButton>\r\n                    </Box>\r\n                </Grid>\r\n            </Paper>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Item","import { Grid, makeStyles } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport Item from \"./Item/Item\";\r\nimport Pagination from '@material-ui/lab/Pagination';\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: `100%`,\r\n        paddingTop: 50,\r\n        paddingBottom: 50,\r\n        '& ul': {\r\n            justifyContent: 'center'\r\n        }\r\n    }\r\n})\r\n\r\n\r\n\r\nconst ListItemComponent = ({ visibility, list }) => {\r\n    const classes = useStyles();\r\n    const [currentPage,setCurrentPage] = useState(1)\r\n\r\n    //pagination\r\n    const itemInOnePage = 9;\r\n    const pageCount = Math.ceil(list.length / itemInOnePage);\r\n\r\n    const start = (currentPage -1) * itemInOnePage;\r\n    const end = start + itemInOnePage;\r\n\r\n    const listPagination = list.slice(start,end)\r\n\r\n    const paginationHandler = (e, page) =>{\r\n        setCurrentPage(page);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {visibility && <div style={{ display: \"flex\", justifyContent: \"center\" }}>\r\n                <div style={{ width: `80%` }}>\r\n\r\n                    {(listPagination.length > 0 ? (<>\r\n                        <Grid container spacing={2} >\r\n                            {listPagination.map((i) => (<Item {...i}></Item>))}\r\n                        </Grid>\r\n\r\n                        <Pagination className={classes.root} page={currentPage} onChange={paginationHandler} count={pageCount} color=\"secondary\" />\r\n\r\n                    </>\r\n                    ) : \"No Result.\")}\r\n\r\n                </div>\r\n\r\n            </div>}\r\n\r\n\r\n\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default ListItemComponent","import { makeStyles, TextField } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport ListItemComponent from \"../ListItem/ListItemComponent\";\r\nimport { songSelector ,visibilitySearchList,getSongByName } from \"../../features/songSlice/songSlice\"\r\nimport { useDispatch,useSelector } from \"react-redux\";\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        '& .MuiFilledInput-root': {\r\n            borderRadius: `unset`\r\n        }\r\n    },\r\n\r\n})\r\n\r\nconst SearchComponent = () => {\r\n    const [searchString, setSearchString] = useState(\"\")\r\n    const classes = useStyles();\r\n\r\n    const dispath = useDispatch();\r\n\r\n    const {searchList} = useSelector(songSelector);\r\n    \r\n\r\n    const handleSearch = (e) => {\r\n        e.preventDefault();\r\n\r\n        const search_key = searchString.trim(); \r\n        if(search_key === \"\"){\r\n            return\r\n        }\r\n        // console.log(searchString);\r\n        dispath(getSongByName(search_key));\r\n        dispath(visibilitySearchList());\r\n\r\n        setSearchString(\"\");\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div style={{ marginBottom: `22px` }}>\r\n                <form onSubmit={handleSearch}>\r\n                    <TextField color=\"secondary\" value={searchString} onChange={(e) => { setSearchString(e.target.value) }} className={classes.root} variant=\"filled\"\r\n                        label=\"What's song you want?\" style={{ width: '80%' }}></TextField>\r\n                </form>\r\n\r\n            </div>\r\n            <ListItemComponent {...searchList} ></ListItemComponent>\r\n\r\n\r\n        </>\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default SearchComponent;","export const proxy = \"https://api.allorigins.win/raw?url=\";\r\n","import React from \"react\";\r\nimport AudioPlayer from 'react-h5-audio-player';\r\nimport 'react-h5-audio-player/lib/styles.css';\r\n\r\nconst PlayerComponent = ({id}) => {\r\n    const src = `http://api.mp3.zing.vn/api/streaming/audio/${id}/320`;\r\n    return (<AudioPlayer\r\n        src={src}\r\n        onPlay={e => console.log(\"onPlay\")}\r\n        onEnded={e => console.log(\"end\")}\r\n        showSkipControls\r\n        showJumpControls={false}\r\n    />)\r\n}\r\n\r\nexport default PlayerComponent","import { AppBar, IconButton, Toolbar, Typography } from '@material-ui/core';\r\nimport { Menu } from \"@material-ui/icons\";\r\nimport React from 'react';\r\nimport './App.css';\r\nimport 'fontsource-roboto';\r\nimport SearchComponent from './components/Search/SearchComponent';\r\nimport PlayerComponent from './components/Player/PlayerComponent';\r\nimport { useSelector } from 'react-redux';\r\nimport {songSelector} from './features/songSlice/songSlice'\r\n\r\n\r\n\r\nfunction App() {\r\n  const {currentSong} = useSelector(songSelector)\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-header\">\r\n        <AppBar color=\"secondary\">\r\n          <Toolbar>\r\n            <IconButton>\r\n              <Menu />\r\n            </IconButton>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              320KBps\r\n              </Typography>\r\n          </Toolbar>\r\n        </AppBar>\r\n\r\n      </div>\r\n      <div className=\"app-main\">\r\n        <Typography variant=\"h3\" component=\"div\" style={{ padding: \"80px\", fontWeight: 'bold', color: `whitesmoke` }}>Music with 320KBps</Typography>\r\n        <div className=\"search-component\" >\r\n          <SearchComponent />\r\n        </div>\r\n        <div className=\"player-component\">\r\n          <PlayerComponent  {...currentSong}/>\r\n        </div>\r\n      </div>\r\n      <div className=\"app-footer\">\r\n      </div>\r\n    </div>\r\n\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport songReducer from '../features/songSlice/songSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    song: songReducer\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}